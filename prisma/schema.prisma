datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id        String   @id @default(cuid())
  name      String   @unique
  themeJson Json?
  createdAt DateTime @default(now())
  users     User[]
  courses   Course[]
  groups    OrgGroup[]
}

model User {
  id        String   @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(LEARNER)
  createdAt DateTime @default(now())
  progresses Progress[]
  quizResponses QuizResponse[]
  reflections  ReflectionResponse[]
  badges       UserBadge[]
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  LEARNER
}

model Course {
  id        String   @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  title     String
  description String?
  modules   Module[]
  createdAt DateTime @default(now())
}

model Module {
  id        String   @id @default(cuid())
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title     String
  order     Int      @default(0)
  lessons   Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  moduleId  String
  module    Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title     String
  youtubeId String
  durationS Int
  requiresFullWatch Boolean @default(true)
  quiz      Quiz?
  reflection Reflection?
  progresses Progress[]
}

model Assignment {
  id        String   @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id])
  courseId  String?
  course    Course? @relation(fields: [courseId], references: [id])
  moduleId  String?
  module    Module? @relation(fields: [moduleId], references: [id])
  createdBy String
  createdAt DateTime @default(now())
  enrollments Enrollment[]
}

model Enrollment {
  id          String @id @default(cuid())
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentId String
  assignment  Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  status      EnrollmentStatus @default(ACTIVE)
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  watchedSeconds Int @default(0)
  lastHeartbeatAt DateTime?
  isComplete Boolean @default(false)

  @@unique([userId, lessonId])
}

model Quiz {
  id        String @id @default(cuid())
  lessonId  String @unique
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
}

model QuizQuestion {
  id        String @id @default(cuid())
  quizId    String
  quiz      Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  type      QuestionType
  prompt    String
  options   Json?
  correctKey String?
}

enum QuestionType {
  MCQ
}

model QuizResponse {
  id          String @id @default(cuid())
  userId      String
  questionId  String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      String
  isCorrect   Boolean
  createdAt   DateTime @default(now())
}

model Reflection {
  id        String @id @default(cuid())
  lessonId  String @unique
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  prompt    String
}

model ReflectionResponse {
  id        String @id @default(cuid())
  userId    String
  reflectionId String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reflection Reflection @relation(fields: [reflectionId], references: [id], onDelete: Cascade)
  text      String
  score     Int?
  aiScored  Boolean @default(false)
  createdAt DateTime @default(now())
}

model Badge {
  id        String @id @default(cuid())
  code      String @unique
  name      String
  criteria  Json
  imageUrl  String?
}

model UserBadge {
  id        String @id @default(cuid())
  userId    String
  badgeId   String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt  DateTime @default(now())

  @@unique([userId, badgeId])
}

model OrgGroup {
  id      String @id @default(cuid())
  orgId   String
  org     Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name    String
  members GroupMember[]
}

model GroupMember {
  id       String @id @default(cuid())
  groupId  String
  userId   String
  group    OrgGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
