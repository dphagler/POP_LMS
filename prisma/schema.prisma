// prisma/schema.prisma

// ------------- Data source & generator (top-level) -------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------- Enums -------------
enum UserRole {
  ADMIN
  INSTRUCTOR
  LEARNER
}

enum UserSource {
  invite
  csv
  sso
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  WITHDRAWN
}

enum VideoProvider {
  youtube
  cloudflare
}

enum OrgRole {
  OWNER
  ADMIN
  INSTRUCTOR
  LEARNER

  @@map("OrgMembershipRole")
}

enum QuestionType {
  MCQ
}

enum AssessmentType {
  quiz
  chat

  @@map("AssessmentType")
}

enum MembershipSource {
  manual
  csv
  invite
  sso
}

enum ImportSource {
  csv
  scorm
  xapi
  lrs
}

enum ImportStatus {
  queued
  running
  succeeded
  failed
  cancelled
}

// ------------- Models -------------
model Organization {
  id           String   @id @default(cuid())
  name         String
  themePrimary String?
  themeAccent  String?
  loginBlurb   String?
  createdAt    DateTime @default(now())

  // back-relations
  users            User[]
  courses          Course[]
  groups           OrgGroup[]
  assignments      Assignment[]
  memberships      OrgMembership[]
  domains          Domain[]
  auditLogs        AuditLog[]
  invites          OrgInvite[]
  importJobs       ImportJob[]
  runtimeSnapshots LessonRuntimeSnapshot[]
  progressDaily    ProgressDaily[]
  progresses       Progress[]
  augmentationMessages AugmentationMessage[]
  augmentationsServed  AugmentationServed[]
}

model User {
  id           String       @id @default(cuid())
  orgId        String
  org          Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  email        String       @unique
  name         String?
  image        String?
  passwordHash String?
  role         UserRole     @default(LEARNER)
  source       UserSource?  @default(sso)
  createdAt    DateTime     @default(now())

  // back-relations
  accounts            Account[]
  sessions            Session[]
  progresses          Progress[]
  assessments         Assessment[]
  augmentationMessages AugmentationMessage[]
  augmentationsServed AugmentationServed[]
  quizResponses       QuizResponse[]
  badges              UserBadge[]
  enrollments         Enrollment[]
  groupMemberships    GroupMember[]
  orgMemberships      OrgMembership[]
  auditLogs           AuditLog[]
  createdInvites      OrgInvite[]          @relation("OrgInviteInvitedBy")
  acceptedInvites     OrgInvite[]          @relation("OrgInviteAcceptedBy")
}

model Course {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  title       String
  description String?
  createdAt   DateTime     @default(now())

  // back-relations
  modules     Module[]
  assignments Assignment[]
}

model Module {
  id       String @id @default(cuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title    String
  order    Int    @default(0)

  // back-relations
  lessons     Lesson[]
  assignments Assignment[]
}

model Lesson {
  id       String  @id @default(cuid())
  moduleId String
  module   Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title    String
  // Cloud provider id (Mux/Cloudflare) stays but becomes optional for YouTube-only lessons
  streamId String?

  // NEW: YouTube support
  provider          VideoProvider?
  videoUrl          String?
  posterUrl         String?
  durationS         Int
  requiresFullWatch Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // one-to-ones
  quiz Quiz?

  // back-relations
  progresses       Progress[]
  assessments      Assessment[]
  augmentationMessages AugmentationMessage[]
  augmentations    AugmentationServed[]
  runtimeSnapshots LessonRuntimeSnapshot[]
  progressDaily    ProgressDaily[]
}

model LessonRuntimeSnapshot {
  orgId       String
  lessonId    String
  version     Int
  runtimeJson Json
  createdAt   DateTime @default(now())

  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  lesson Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@id([orgId, lessonId, version])
  @@index([orgId, lessonId, version(sort: Desc)])
}

model Assignment {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  groupId String
  group   OrgGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

  moduleId String?
  module   Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)

  dueAt DateTime?
  label String?

  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // back-relations
  enrollments Enrollment[]
}

model Enrollment {
  id           String           @id @default(cuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentId String
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  status       EnrollmentStatus @default(ACTIVE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?

  @@unique([assignmentId, userId])
}

model Progress {
  id            String   @id @default(cuid())
  orgId         String
  userId        String
  lessonId      String
  org           Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson        Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  segments      Json? // [{s:number,e:number}] seconds
  uniqueSeconds Int?
  lastTickAt    DateTime?
  completedAt   DateTime?
  reflectionAt  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([userId, lessonId])
  @@index([lessonId, completedAt])
  @@index([orgId, lessonId, userId])
}

model ProgressDaily {
  id               String   @id @default(cuid())
  orgId            String
  lessonId         String
  date             DateTime
  viewers          Int      @default(0)
  avgPercent       Float    @default(0)
  completes        Int      @default(0)
  uniqueSecondsSum Int      @default(0)
  createdAt        DateTime @default(now())

  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  lesson Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([orgId, lessonId, date])
  @@index([date])
  @@index([orgId, date])
}

model AugmentationMessage {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  lessonId  String
  role      String
  content   String
  evidence  Json?
  createdAt DateTime @default(now())

  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([orgId, userId, lessonId, createdAt])
}

model AugmentationServed {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  lessonId  String
  kind      String
  createdAt DateTime @default(now())

  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([orgId, lessonId, createdAt])
}

model Quiz {
  id       String @id @default(cuid())
  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // back-relations
  questions QuizQuestion[]
}

model QuizQuestion {
  id         String       @id @default(cuid())
  quizId     String
  quiz       Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  type       QuestionType
  prompt     String
  options    Json? // for MCQ
  correctKey String? // for MCQ

  // back-relations
  responses QuizResponse[]
}

model QuizResponse {
  id         String @id @default(cuid())
  userId     String
  questionId String

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answer    String
  isCorrect Boolean
  createdAt DateTime @default(now())
}

model Assessment {
  id             String         @id @default(cuid())
  userId         String
  lessonId       String
  type           AssessmentType
  startedAt      DateTime       @default(now())
  completedAt    DateTime?
  isPassed       Boolean        @default(false)
  score          Int?
  diagnosticJson Json?
  raw            Json?
  updatedAt      DateTime       @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId, type])
  @@index([userId])
  @@index([lessonId])
}

model Badge {
  id       String  @id @default(cuid())
  code     String  @unique
  name     String
  criteria Json
  imageUrl String?

  // back-relations
  userBadges UserBadge[]
}

model UserBadge {
  id      String @id @default(cuid())
  userId  String
  badgeId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  earnedAt DateTime @default(now())
}

model OrgGroup {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  // back-relations
  members      GroupMember[]
  assignments  Assignment[]
  inviteGroups OrgInviteGroup[]
}

model OrgMembership {
  id        String           @id @default(cuid())
  userId    String
  orgId     String
  role      OrgRole          @default(LEARNER)
  source    MembershipSource @default(manual)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
}

model OrgInvite {
  id           String    @id @default(cuid())
  orgId        String
  email        String
  role         OrgRole
  tokenHash    String    @unique
  expiresAt    DateTime
  invitedById  String?
  acceptedById String?
  acceptedAt   DateTime?
  consumedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  org        Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  invitedBy  User?            @relation("OrgInviteInvitedBy", fields: [invitedById], references: [id], onDelete: SetNull)
  acceptedBy User?            @relation("OrgInviteAcceptedBy", fields: [acceptedById], references: [id], onDelete: SetNull)
  groups     OrgInviteGroup[]

  @@index([orgId, email])
  @@index([orgId, consumedAt])
}

model OrgInviteGroup {
  id       String @id @default(cuid())
  inviteId String
  groupId  String

  invite OrgInvite @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  group  OrgGroup  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([inviteId, groupId])
}

model GroupMember {
  id           String  @id @default(cuid())
  groupId      String
  userId       String
  groupManager Boolean @default(false)

  group OrgGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model ImportJob {
  id             String       @id @default(cuid())
  orgId          String
  source         ImportSource
  fileName       String
  fileData       Bytes?
  status         ImportStatus @default(queued)
  processedCount Int          @default(0)
  successCount   Int          @default(0)
  errorCount     Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  completedAt    DateTime?
  lastError      String?
  resultsJson    Json?

  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model Domain {
  id         String    @id @default(cuid())
  orgId      String
  value      String    @unique
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?

  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([value])
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String
  actorId   String?
  action    String
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())

  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  actor User?        @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([orgId, createdAt])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
